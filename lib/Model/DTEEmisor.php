<?php
/**
 * DTEEmisor
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenFactura API
 *
 * Estructura de openfactura
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Tsukiro\Client\Model;

use \ArrayAccess;
use \Tsukiro\Client\ObjectSerializer;

/**
 * DTEEmisor Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DTEEmisor implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DTEEmisor';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'rut_emisor' => 'string',
'rzn_soc' => 'string',
'giro_emis' => 'string',
'acteco' => 'OneOfDTEEmisorActeco',
'dir_origen' => 'string',
'cmna_origen' => 'string',
'telefono' => 'string',
'cdg_sii_sucur' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'rut_emisor' => null,
'rzn_soc' => null,
'giro_emis' => null,
'acteco' => null,
'dir_origen' => null,
'cmna_origen' => null,
'telefono' => null,
'cdg_sii_sucur' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rut_emisor' => 'RUTEmisor',
'rzn_soc' => 'RznSoc',
'giro_emis' => 'GiroEmis',
'acteco' => 'Acteco',
'dir_origen' => 'DirOrigen',
'cmna_origen' => 'CmnaOrigen',
'telefono' => 'Telefono',
'cdg_sii_sucur' => 'CdgSIISucur'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rut_emisor' => 'setRutEmisor',
'rzn_soc' => 'setRznSoc',
'giro_emis' => 'setGiroEmis',
'acteco' => 'setActeco',
'dir_origen' => 'setDirOrigen',
'cmna_origen' => 'setCmnaOrigen',
'telefono' => 'setTelefono',
'cdg_sii_sucur' => 'setCdgSiiSucur'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rut_emisor' => 'getRutEmisor',
'rzn_soc' => 'getRznSoc',
'giro_emis' => 'getGiroEmis',
'acteco' => 'getActeco',
'dir_origen' => 'getDirOrigen',
'cmna_origen' => 'getCmnaOrigen',
'telefono' => 'getTelefono',
'cdg_sii_sucur' => 'getCdgSiiSucur'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rut_emisor'] = isset($data['rut_emisor']) ? $data['rut_emisor'] : null;
        $this->container['rzn_soc'] = isset($data['rzn_soc']) ? $data['rzn_soc'] : null;
        $this->container['giro_emis'] = isset($data['giro_emis']) ? $data['giro_emis'] : null;
        $this->container['acteco'] = isset($data['acteco']) ? $data['acteco'] : null;
        $this->container['dir_origen'] = isset($data['dir_origen']) ? $data['dir_origen'] : null;
        $this->container['cmna_origen'] = isset($data['cmna_origen']) ? $data['cmna_origen'] : null;
        $this->container['telefono'] = isset($data['telefono']) ? $data['telefono'] : null;
        $this->container['cdg_sii_sucur'] = isset($data['cdg_sii_sucur']) ? $data['cdg_sii_sucur'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rut_emisor
     *
     * @return string
     */
    public function getRutEmisor()
    {
        return $this->container['rut_emisor'];
    }

    /**
     * Sets rut_emisor
     *
     * @param string $rut_emisor rut_emisor
     *
     * @return $this
     */
    public function setRutEmisor($rut_emisor)
    {
        $this->container['rut_emisor'] = $rut_emisor;

        return $this;
    }

    /**
     * Gets rzn_soc
     *
     * @return string
     */
    public function getRznSoc()
    {
        return $this->container['rzn_soc'];
    }

    /**
     * Sets rzn_soc
     *
     * @param string $rzn_soc rzn_soc
     *
     * @return $this
     */
    public function setRznSoc($rzn_soc)
    {
        $this->container['rzn_soc'] = $rzn_soc;

        return $this;
    }

    /**
     * Gets giro_emis
     *
     * @return string
     */
    public function getGiroEmis()
    {
        return $this->container['giro_emis'];
    }

    /**
     * Sets giro_emis
     *
     * @param string $giro_emis giro_emis
     *
     * @return $this
     */
    public function setGiroEmis($giro_emis)
    {
        $this->container['giro_emis'] = $giro_emis;

        return $this;
    }

    /**
     * Gets acteco
     *
     * @return OneOfDTEEmisorActeco
     */
    public function getActeco()
    {
        return $this->container['acteco'];
    }

    /**
     * Sets acteco
     *
     * @param OneOfDTEEmisorActeco $acteco acteco
     *
     * @return $this
     */
    public function setActeco($acteco)
    {
        $this->container['acteco'] = $acteco;

        return $this;
    }

    /**
     * Gets dir_origen
     *
     * @return string
     */
    public function getDirOrigen()
    {
        return $this->container['dir_origen'];
    }

    /**
     * Sets dir_origen
     *
     * @param string $dir_origen dir_origen
     *
     * @return $this
     */
    public function setDirOrigen($dir_origen)
    {
        $this->container['dir_origen'] = $dir_origen;

        return $this;
    }

    /**
     * Gets cmna_origen
     *
     * @return string
     */
    public function getCmnaOrigen()
    {
        return $this->container['cmna_origen'];
    }

    /**
     * Sets cmna_origen
     *
     * @param string $cmna_origen cmna_origen
     *
     * @return $this
     */
    public function setCmnaOrigen($cmna_origen)
    {
        $this->container['cmna_origen'] = $cmna_origen;

        return $this;
    }

    /**
     * Gets telefono
     *
     * @return string
     */
    public function getTelefono()
    {
        return $this->container['telefono'];
    }

    /**
     * Sets telefono
     *
     * @param string $telefono telefono
     *
     * @return $this
     */
    public function setTelefono($telefono)
    {
        $this->container['telefono'] = $telefono;

        return $this;
    }

    /**
     * Gets cdg_sii_sucur
     *
     * @return string
     */
    public function getCdgSiiSucur()
    {
        return $this->container['cdg_sii_sucur'];
    }

    /**
     * Sets cdg_sii_sucur
     *
     * @param string $cdg_sii_sucur cdg_sii_sucur
     *
     * @return $this
     */
    public function setCdgSiiSucur($cdg_sii_sucur)
    {
        $this->container['cdg_sii_sucur'] = $cdg_sii_sucur;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
