<?php
/**
 * DTETotales
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenFactura API
 *
 * Estructura de openfactura
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Tsukiro\Client\Model;

use \ArrayAccess;
use \Tsukiro\Client\ObjectSerializer;

/**
 * DTETotales Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DTETotales implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DTETotales';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'mnt_neto' => 'int',
'tasa_iva' => 'string',
'iva' => 'int',
'mnt_total' => 'int',
'monto_periodo' => 'int',
'vlr_pagar' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'mnt_neto' => null,
'tasa_iva' => null,
'iva' => null,
'mnt_total' => null,
'monto_periodo' => null,
'vlr_pagar' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mnt_neto' => 'MntNeto',
'tasa_iva' => 'TasaIVA',
'iva' => 'IVA',
'mnt_total' => 'MntTotal',
'monto_periodo' => 'MontoPeriodo',
'vlr_pagar' => 'VlrPagar'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mnt_neto' => 'setMntNeto',
'tasa_iva' => 'setTasaIva',
'iva' => 'setIva',
'mnt_total' => 'setMntTotal',
'monto_periodo' => 'setMontoPeriodo',
'vlr_pagar' => 'setVlrPagar'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mnt_neto' => 'getMntNeto',
'tasa_iva' => 'getTasaIva',
'iva' => 'getIva',
'mnt_total' => 'getMntTotal',
'monto_periodo' => 'getMontoPeriodo',
'vlr_pagar' => 'getVlrPagar'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mnt_neto'] = isset($data['mnt_neto']) ? $data['mnt_neto'] : null;
        $this->container['tasa_iva'] = isset($data['tasa_iva']) ? $data['tasa_iva'] : null;
        $this->container['iva'] = isset($data['iva']) ? $data['iva'] : null;
        $this->container['mnt_total'] = isset($data['mnt_total']) ? $data['mnt_total'] : null;
        $this->container['monto_periodo'] = isset($data['monto_periodo']) ? $data['monto_periodo'] : null;
        $this->container['vlr_pagar'] = isset($data['vlr_pagar']) ? $data['vlr_pagar'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mnt_neto
     *
     * @return int
     */
    public function getMntNeto()
    {
        return $this->container['mnt_neto'];
    }

    /**
     * Sets mnt_neto
     *
     * @param int $mnt_neto mnt_neto
     *
     * @return $this
     */
    public function setMntNeto($mnt_neto)
    {
        $this->container['mnt_neto'] = $mnt_neto;

        return $this;
    }

    /**
     * Gets tasa_iva
     *
     * @return string
     */
    public function getTasaIva()
    {
        return $this->container['tasa_iva'];
    }

    /**
     * Sets tasa_iva
     *
     * @param string $tasa_iva tasa_iva
     *
     * @return $this
     */
    public function setTasaIva($tasa_iva)
    {
        $this->container['tasa_iva'] = $tasa_iva;

        return $this;
    }

    /**
     * Gets iva
     *
     * @return int
     */
    public function getIva()
    {
        return $this->container['iva'];
    }

    /**
     * Sets iva
     *
     * @param int $iva iva
     *
     * @return $this
     */
    public function setIva($iva)
    {
        $this->container['iva'] = $iva;

        return $this;
    }

    /**
     * Gets mnt_total
     *
     * @return int
     */
    public function getMntTotal()
    {
        return $this->container['mnt_total'];
    }

    /**
     * Sets mnt_total
     *
     * @param int $mnt_total mnt_total
     *
     * @return $this
     */
    public function setMntTotal($mnt_total)
    {
        $this->container['mnt_total'] = $mnt_total;

        return $this;
    }

    /**
     * Gets monto_periodo
     *
     * @return int
     */
    public function getMontoPeriodo()
    {
        return $this->container['monto_periodo'];
    }

    /**
     * Sets monto_periodo
     *
     * @param int $monto_periodo monto_periodo
     *
     * @return $this
     */
    public function setMontoPeriodo($monto_periodo)
    {
        $this->container['monto_periodo'] = $monto_periodo;

        return $this;
    }

    /**
     * Gets vlr_pagar
     *
     * @return int
     */
    public function getVlrPagar()
    {
        return $this->container['vlr_pagar'];
    }

    /**
     * Sets vlr_pagar
     *
     * @param int $vlr_pagar vlr_pagar
     *
     * @return $this
     */
    public function setVlrPagar($vlr_pagar)
    {
        $this->container['vlr_pagar'] = $vlr_pagar;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
