<?php
/**
 * DTEFilter
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenFactura API
 *
 * Estructura de openfactura
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Tsukiro\Client\Model;

use \ArrayAccess;
use \Tsukiro\Client\ObjectSerializer;

/**
 * DTEFilter Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DTEFilter implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DTEFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'eq' => 'string',
'lt' => 'string',
'gt' => 'string',
'lte' => 'string',
'gte' => 'string',
'ne' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'eq' => null,
'lt' => null,
'gt' => null,
'lte' => null,
'gte' => null,
'ne' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'eq' => 'eq',
'lt' => 'lt',
'gt' => 'gt',
'lte' => 'lte',
'gte' => 'gte',
'ne' => 'ne'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'eq' => 'setEq',
'lt' => 'setLt',
'gt' => 'setGt',
'lte' => 'setLte',
'gte' => 'setGte',
'ne' => 'setNe'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'eq' => 'getEq',
'lt' => 'getLt',
'gt' => 'getGt',
'lte' => 'getLte',
'gte' => 'getGte',
'ne' => 'getNe'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['eq'] = isset($data['eq']) ? $data['eq'] : null;
        $this->container['lt'] = isset($data['lt']) ? $data['lt'] : null;
        $this->container['gt'] = isset($data['gt']) ? $data['gt'] : null;
        $this->container['lte'] = isset($data['lte']) ? $data['lte'] : null;
        $this->container['gte'] = isset($data['gte']) ? $data['gte'] : null;
        $this->container['ne'] = isset($data['ne']) ? $data['ne'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets eq
     *
     * @return string
     */
    public function getEq()
    {
        return $this->container['eq'];
    }

    /**
     * Sets eq
     *
     * @param string $eq eq
     *
     * @return $this
     */
    public function setEq($eq)
    {
        $this->container['eq'] = $eq;

        return $this;
    }

    /**
     * Gets lt
     *
     * @return string
     */
    public function getLt()
    {
        return $this->container['lt'];
    }

    /**
     * Sets lt
     *
     * @param string $lt lt
     *
     * @return $this
     */
    public function setLt($lt)
    {
        $this->container['lt'] = $lt;

        return $this;
    }

    /**
     * Gets gt
     *
     * @return string
     */
    public function getGt()
    {
        return $this->container['gt'];
    }

    /**
     * Sets gt
     *
     * @param string $gt gt
     *
     * @return $this
     */
    public function setGt($gt)
    {
        $this->container['gt'] = $gt;

        return $this;
    }

    /**
     * Gets lte
     *
     * @return string
     */
    public function getLte()
    {
        return $this->container['lte'];
    }

    /**
     * Sets lte
     *
     * @param string $lte lte
     *
     * @return $this
     */
    public function setLte($lte)
    {
        $this->container['lte'] = $lte;

        return $this;
    }

    /**
     * Gets gte
     *
     * @return string
     */
    public function getGte()
    {
        return $this->container['gte'];
    }

    /**
     * Sets gte
     *
     * @param string $gte gte
     *
     * @return $this
     */
    public function setGte($gte)
    {
        $this->container['gte'] = $gte;

        return $this;
    }

    /**
     * Gets ne
     *
     * @return string
     */
    public function getNe()
    {
        return $this->container['ne'];
    }

    /**
     * Sets ne
     *
     * @param string $ne ne
     *
     * @return $this
     */
    public function setNe($ne)
    {
        $this->container['ne'] = $ne;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
