<?php
/**
 * DTEDscRcgGlobal
 *
 * PHP version 5
 *
 * @category Class
 * @package  Tsukiro\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenFactura API
 *
 * Estructura de openfactura
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Tsukiro\Client\Model;

use \ArrayAccess;
use \Tsukiro\Client\ObjectSerializer;

/**
 * DTEDscRcgGlobal Class Doc Comment
 *
 * @category Class
 * @package  Tsukiro\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DTEDscRcgGlobal implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DTEDscRcgGlobal';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'nro_lin_dr' => 'int',
'tpo_mov' => 'string',
'glosa_dr' => 'string',
'tpo_valor' => 'string',
'valor_dr' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'nro_lin_dr' => null,
'tpo_mov' => null,
'glosa_dr' => null,
'tpo_valor' => null,
'valor_dr' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'nro_lin_dr' => 'NroLinDR',
'tpo_mov' => 'TpoMov',
'glosa_dr' => 'GlosaDR',
'tpo_valor' => 'TpoValor',
'valor_dr' => 'ValorDR'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'nro_lin_dr' => 'setNroLinDr',
'tpo_mov' => 'setTpoMov',
'glosa_dr' => 'setGlosaDr',
'tpo_valor' => 'setTpoValor',
'valor_dr' => 'setValorDr'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'nro_lin_dr' => 'getNroLinDr',
'tpo_mov' => 'getTpoMov',
'glosa_dr' => 'getGlosaDr',
'tpo_valor' => 'getTpoValor',
'valor_dr' => 'getValorDr'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['nro_lin_dr'] = isset($data['nro_lin_dr']) ? $data['nro_lin_dr'] : null;
        $this->container['tpo_mov'] = isset($data['tpo_mov']) ? $data['tpo_mov'] : null;
        $this->container['glosa_dr'] = isset($data['glosa_dr']) ? $data['glosa_dr'] : null;
        $this->container['tpo_valor'] = isset($data['tpo_valor']) ? $data['tpo_valor'] : null;
        $this->container['valor_dr'] = isset($data['valor_dr']) ? $data['valor_dr'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets nro_lin_dr
     *
     * @return int
     */
    public function getNroLinDr()
    {
        return $this->container['nro_lin_dr'];
    }

    /**
     * Sets nro_lin_dr
     *
     * @param int $nro_lin_dr nro_lin_dr
     *
     * @return $this
     */
    public function setNroLinDr($nro_lin_dr)
    {
        $this->container['nro_lin_dr'] = $nro_lin_dr;

        return $this;
    }

    /**
     * Gets tpo_mov
     *
     * @return string
     */
    public function getTpoMov()
    {
        return $this->container['tpo_mov'];
    }

    /**
     * Sets tpo_mov
     *
     * @param string $tpo_mov tpo_mov
     *
     * @return $this
     */
    public function setTpoMov($tpo_mov)
    {
        $this->container['tpo_mov'] = $tpo_mov;

        return $this;
    }

    /**
     * Gets glosa_dr
     *
     * @return string
     */
    public function getGlosaDr()
    {
        return $this->container['glosa_dr'];
    }

    /**
     * Sets glosa_dr
     *
     * @param string $glosa_dr glosa_dr
     *
     * @return $this
     */
    public function setGlosaDr($glosa_dr)
    {
        $this->container['glosa_dr'] = $glosa_dr;

        return $this;
    }

    /**
     * Gets tpo_valor
     *
     * @return string
     */
    public function getTpoValor()
    {
        return $this->container['tpo_valor'];
    }

    /**
     * Sets tpo_valor
     *
     * @param string $tpo_valor tpo_valor
     *
     * @return $this
     */
    public function setTpoValor($tpo_valor)
    {
        $this->container['tpo_valor'] = $tpo_valor;

        return $this;
    }

    /**
     * Gets valor_dr
     *
     * @return int
     */
    public function getValorDr()
    {
        return $this->container['valor_dr'];
    }

    /**
     * Sets valor_dr
     *
     * @param int $valor_dr valor_dr
     *
     * @return $this
     */
    public function setValorDr($valor_dr)
    {
        $this->container['valor_dr'] = $valor_dr;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
