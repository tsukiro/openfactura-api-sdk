<?php
/**
 * DTEIdDoc
 *
 * PHP version 5
 *
 * @category Class
 * @package  Tsukiro\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenFactura API
 *
 * Estructura de openfactura
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Tsukiro\Client\Model;

use \ArrayAccess;
use \Tsukiro\Client\ObjectSerializer;

/**
 * DTEIdDoc Class Doc Comment
 *
 * @category Class
 * @package  Tsukiro\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DTEIdDoc implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DTEIdDoc';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tipo_dte' => 'int',
'folio' => 'int',
'fch_emis' => 'string',
'tpo_tran_compra' => 'string',
'tpo_tran_venta' => 'string',
'fma_pago' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tipo_dte' => null,
'folio' => null,
'fch_emis' => null,
'tpo_tran_compra' => null,
'tpo_tran_venta' => null,
'fma_pago' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tipo_dte' => 'TipoDTE',
'folio' => 'Folio',
'fch_emis' => 'FchEmis',
'tpo_tran_compra' => 'TpoTranCompra',
'tpo_tran_venta' => 'TpoTranVenta',
'fma_pago' => 'FmaPago'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tipo_dte' => 'setTipoDte',
'folio' => 'setFolio',
'fch_emis' => 'setFchEmis',
'tpo_tran_compra' => 'setTpoTranCompra',
'tpo_tran_venta' => 'setTpoTranVenta',
'fma_pago' => 'setFmaPago'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tipo_dte' => 'getTipoDte',
'folio' => 'getFolio',
'fch_emis' => 'getFchEmis',
'tpo_tran_compra' => 'getTpoTranCompra',
'tpo_tran_venta' => 'getTpoTranVenta',
'fma_pago' => 'getFmaPago'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TIPO_DTE_33 = 33;
const TIPO_DTE_52 = 52;
const TIPO_DTE_61 = 61;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTipoDteAllowableValues()
    {
        return [
            self::TIPO_DTE_33,
self::TIPO_DTE_52,
self::TIPO_DTE_61,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tipo_dte'] = isset($data['tipo_dte']) ? $data['tipo_dte'] : null;
        $this->container['folio'] = isset($data['folio']) ? $data['folio'] : 0;
        $this->container['fch_emis'] = isset($data['fch_emis']) ? $data['fch_emis'] : null;
        $this->container['tpo_tran_compra'] = isset($data['tpo_tran_compra']) ? $data['tpo_tran_compra'] : null;
        $this->container['tpo_tran_venta'] = isset($data['tpo_tran_venta']) ? $data['tpo_tran_venta'] : null;
        $this->container['fma_pago'] = isset($data['fma_pago']) ? $data['fma_pago'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTipoDteAllowableValues();
        if (!is_null($this->container['tipo_dte']) && !in_array($this->container['tipo_dte'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tipo_dte', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tipo_dte
     *
     * @return int
     */
    public function getTipoDte()
    {
        return $this->container['tipo_dte'];
    }

    /**
     * Sets tipo_dte
     *
     * @param int $tipo_dte tipo_dte
     *
     * @return $this
     */
    public function setTipoDte($tipo_dte)
    {
        $allowedValues = $this->getTipoDteAllowableValues();
        if (!is_null($tipo_dte) && !in_array($tipo_dte, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tipo_dte', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tipo_dte'] = $tipo_dte;

        return $this;
    }

    /**
     * Gets folio
     *
     * @return int
     */
    public function getFolio()
    {
        return $this->container['folio'];
    }

    /**
     * Sets folio
     *
     * @param int $folio folio
     *
     * @return $this
     */
    public function setFolio($folio)
    {
        $this->container['folio'] = $folio;

        return $this;
    }

    /**
     * Gets fch_emis
     *
     * @return string
     */
    public function getFchEmis()
    {
        return $this->container['fch_emis'];
    }

    /**
     * Sets fch_emis
     *
     * @param string $fch_emis fch_emis
     *
     * @return $this
     */
    public function setFchEmis($fch_emis)
    {
        $this->container['fch_emis'] = $fch_emis;

        return $this;
    }

    /**
     * Gets tpo_tran_compra
     *
     * @return string
     */
    public function getTpoTranCompra()
    {
        return $this->container['tpo_tran_compra'];
    }

    /**
     * Sets tpo_tran_compra
     *
     * @param string $tpo_tran_compra tpo_tran_compra
     *
     * @return $this
     */
    public function setTpoTranCompra($tpo_tran_compra)
    {
        $this->container['tpo_tran_compra'] = $tpo_tran_compra;

        return $this;
    }

    /**
     * Gets tpo_tran_venta
     *
     * @return string
     */
    public function getTpoTranVenta()
    {
        return $this->container['tpo_tran_venta'];
    }

    /**
     * Sets tpo_tran_venta
     *
     * @param string $tpo_tran_venta tpo_tran_venta
     *
     * @return $this
     */
    public function setTpoTranVenta($tpo_tran_venta)
    {
        $this->container['tpo_tran_venta'] = $tpo_tran_venta;

        return $this;
    }

    /**
     * Gets fma_pago
     *
     * @return string
     */
    public function getFmaPago()
    {
        return $this->container['fma_pago'];
    }

    /**
     * Sets fma_pago
     *
     * @param string $fma_pago fma_pago
     *
     * @return $this
     */
    public function setFmaPago($fma_pago)
    {
        $this->container['fma_pago'] = $fma_pago;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
